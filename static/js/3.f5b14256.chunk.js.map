{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","API/REDUX_FORM_API.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","preview","id","to","className","classes","dialog","circle","person","Message","message","ReduxFormAPI","props","fields","i","length","dispatch","change","untouch","maxLengthValidator","maxLengthTC","DialogFormContainer","reduxForm","form","onSubmit","handleSubmit","type","value","newMessageBody","placeholder","component","Textarea","validate","required","name","Dialogs","dialogElements","state","dialogsData","map","el","messageElements","messagesData","msg","DialogList","ActiveDialog","obj","addMessage","textareaData","compose","withAuthRedirect","connect","messagesPage","currentMsg","addCommentAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,OAAS,0B,6ECarMC,EAXE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,GAC1B,OACE,cAAC,IAAD,CAASC,GAAI,YAAcF,EAA3B,SACE,sBAAKG,UAAWC,IAAQC,OAAxB,UACE,qBAAKF,UAAWC,IAAQE,OAAxB,SAAiCL,IACjC,qBAAKE,UAAWC,IAAQG,OAAxB,SAAiCP,UCF5BQ,EAJC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OAAO,8BAAMA,K,iECCJC,EAAe,SACdC,GAEN,IADA,IAAMC,EAAS,CAAC,gBACPC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAC/BF,EAAMI,SAASC,YAAO,aAAaJ,EAAOC,GAAG,OAC7CF,EAAMI,SAASE,YAAQ,aAAaL,EAAOC,MC2BjDK,EAAqBC,YAAY,IA+BnCC,EAAsBC,IAAU,CAClCC,KAAM,aACNV,OAAQ,CAAC,iBAFeS,EA7BT,SAACV,GAEhB,OACE,uBAAMY,SAAUZ,EAAMa,aAAtB,UACE,cAAC,IAAD,CACEC,KAAK,OACLC,MAAOf,EAAMgB,eACbC,YAAY,uGACZC,UAAWC,IACXC,SAAU,CAACC,IAAUd,GACrBe,KAAK,iBAGP,uBACA,uBAAOR,KAAK,SAASG,YAAY,gBAoBxBM,EA7DC,SAACvB,GAEf,IAAIwB,EAAiBxB,EAAMyB,MAAMC,YAAYC,KAAK,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAYvC,QAASuC,EAAGN,KAAMhC,GAAIsC,EAAGtC,QACzFuC,EAAkB7B,EAAMyB,MAAMK,aAAaH,KAAK,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAS9B,QAAS8B,EAAGG,IAAKzC,GAAIsC,EAAGtC,QAO3F,OACE,sBAAKE,UAAWC,IAAQ8B,QAAxB,UACE,qBAAK/B,UAAWC,IAAQuC,WAAxB,SACGR,IAGH,sBAAKhC,UAAWC,IAAQwC,aAAxB,UACGJ,EACD,cAACpB,EAAD,CAAqBG,SAbL,SAACsB,GACrBlC,EAAMmC,WAAWD,EAAIE,cACrBrC,EAAuBC,IAW2BgB,eAAgBhB,EAAMgB,wB,gCCR7DqB,4BACbC,IACAC,mBAhBsB,SAACd,GACvB,MAAO,CACLA,MAAQA,EAAMe,aACdxB,eAAiBS,EAAMe,aAAaxB,mBAKb,SAACZ,GAC1B,MAAO,CACL+B,WAAa,SAACM,GAAiBrC,EAASsC,YAAaD,SAI1CJ,CAGbd","file":"static/js/3.f5b14256.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__1pNzm\",\"DialogList\":\"Dialogs_DialogList__w-FDN\",\"ActiveDialog\":\"Dialogs_ActiveDialog__gEJa4\",\"dialog\":\"Dialogs_dialog__1PXQk\",\"circle\":\"Dialogs_circle__14PkU\",\"person\":\"Dialogs_person__X9-1O\"};","import classes from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = ({preview, id}) => {\r\n    return (\r\n      <NavLink to={'/dialogs/' + preview}>\r\n        <div className={classes.dialog}>\r\n          <div className={classes.circle}>{id}</div>\r\n          <div className={classes.person}>{preview}</div>\r\n        </div>\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  export default DialogItem;","\r\n\r\nconst Message = ({message}) => {\r\n    return <div>{message}</div>;\r\n  };\r\n\r\nexport default Message;","import { change, untouch } from \"redux-form\"\r\n\r\n\r\n\r\nexport const ReduxFormAPI = {\r\n    resetForm(props){\r\n        const fields = ['textareaData']\r\n        for (var i = 0; i < fields.length; i++) {\r\n            props.dispatch(change('dialogForm',fields[i],null))\r\n            props.dispatch(untouch('dialogForm',fields[i]))\r\n        }\r\n    }\r\n}\r\n\r\n","import classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport React from 'react';\r\nimport Field from \"redux-form/lib/Field\";\r\nimport reduxForm from \"redux-form/lib/reduxForm\";\r\nimport { Textarea } from '../common/FormControls/FormControls';\r\nimport { maxLengthTC, required } from '../../utils/validators/VALIDATORS';\r\nimport { change, untouch } from 'redux-form';\r\nimport { ReduxFormAPI } from '../../API/REDUX_FORM_API';\r\n\r\nconst Dialogs = (props) => {\r\n  \r\n  let dialogElements = props.state.dialogsData.map( el => <DialogItem preview={el.name} id={el.id}/> );\r\n  let messageElements = props.state.messagesData.map( el => <Message message={el.msg} id={el.id}/>)\r\n\r\n  const storeFormData = (obj) => {\r\n    props.addMessage(obj.textareaData);\r\n    ReduxFormAPI.resetForm(props);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Dialogs}>\r\n      <div className={classes.DialogList}>\r\n        {dialogElements}\r\n      </div>\r\n\r\n      <div className={classes.ActiveDialog}>\r\n        {messageElements}\r\n        <DialogFormContainer onSubmit={storeFormData} newMessageBody={props.newMessageBody}/>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLengthValidator = maxLengthTC(30);\r\n\r\nlet DialogForm = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field \r\n        type=\"text\" \r\n        value={props.newMessageBody} \r\n        placeholder=\"Введите сообщение...\" \r\n        component={Textarea}\r\n        validate={[required, maxLengthValidator]} \r\n        name=\"textareaData\"\r\n      />\r\n\r\n      <br />\r\n      <input type=\"submit\" placeholder=\"LOGIN\"/>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {}\r\n  if (!formValues.textareaData){\r\n    errors.textareaData = \"really bruh?! enter your name first...\"\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n\r\nlet DialogFormContainer = reduxForm({\r\n  form: 'dialogForm',\r\n  fields: ['textareaData']\r\n})(DialogForm);\r\n\r\nexport default Dialogs;\r\n","\r\nimport Dialogs from './Dialogs';\r\nimport { addCommentAC } from '../../redux/dialogsReduser';\r\nimport { connect } from 'react-redux';\r\nimport withAuthRedirect from '../HOCs/AuthHOC';\r\nimport { compose } from 'redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    state : state.messagesPage,\r\n    newMessageBody : state.messagesPage.newMessageBody\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage : (currentMsg) => { dispatch(addCommentAC(currentMsg));},\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps,mapDispatchToProps)\r\n)(Dialogs);;\r\n"],"sourceRoot":""}